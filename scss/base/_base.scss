html {
    background-color: $color-one;
    height: 100%;
}
body {
    @include blockRel;

    background-color: white;
    height: 100%;
    max-width: 1500px;
    margin: auto;
}
a {
    text-decoration: none;
}
a.hu {
    &:hover {
        text-decoration: underline;
    }
}
a.u {
    text-decoration: underline;
}

@mixin container {
    @include blockRel;

    padding: .01rem; // prevents margin-collapse
    z-index: 0;

    &.vh {
        height: 100%;
    }

    &.vh2 {
        height: 50%;
    }
}
.container {
    @include container;
}

// These come in handy with containers where you need vertical spacing.
.pad-sm {
    padding: 3rem 0rem;
}
.pad-med {
    padding: 7rem 0rem;
}
.pad-lg {
    padding: 10rem 0rem;
}

/* Use a row to specify width and .inline or .float options
 * to set up a wrapper for grids.
 */
@mixin row {
    @include blockRel;

    height: 100%;
    margin: 0 auto;
    padding: .01rem; // prevents margin-collapse
    width: 100%;
    z-index: 1;

    &.small {
        width: 90%;

        @media screen and (min-width: $xs) {
            width: 70%;
        }
        @media screen and (min-width: $med) {
            width: 50%;
        }
    }

    &.medium {
        width: 90%;

        @media screen and (min-width: $xs) {
            width: 80%;
        }
        @media screen and (min-width: $med) {
            width: 70%;
        }
    }

    &.large {
        width: 95%;

        @media screen and (min-width: $xs) {
            width: 92.5%;
        }
        @media screen and (min-width: $med) {
            width: 90%;
        }
    }

    &.inline {
        text-align: justify;

        &::after {
            @include inlineRel;

            content: '';
            width: 100%;
        }

        &.center {
            text-align: center;
        }

        .block {
            @include inlineRel;
        }
    } 

    // Vertically middle align child, e.g. ".content"
    &.vm-child {
        &::after {
            @include inlineRel;

            content:'';
            height: 50%;
            width: 0px;
        }
    }

    // Grid block identifying class
    .block {
        @include blockRel;

        float: left;
    }
}
.row {
    @include row;
}

// Usually content within a container/row.
.content {
    @include inlineRel;

    margin: auto;
    text-align: left;
    width: 99%; // default width
    vertical-align: middle;

    // Inner content, same props as .row, but for nesting and altering width, margin, etc.
    .inner {
        @include row;
    }
}


.test {
    height: 100px;
    background-color: $color-one;
    margin-bottom: 1rem;
}



// Random components 
.divider {
    @include blockRel;

    background-color: $color-three;
    height: 4px;
    margin: 1rem 0rem 1.4rem;
    width: 100px;
}