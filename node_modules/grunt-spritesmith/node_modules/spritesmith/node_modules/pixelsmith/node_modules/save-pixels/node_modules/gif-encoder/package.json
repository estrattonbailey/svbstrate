{
  "name": "gif-encoder",
  "description": "Streaming GIF encoder",
  "version": "0.4.1",
  "homepage": "https://github.com/twolfson/gif-encoder",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/gif-encoder.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/gif-encoder/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/gif-encoder/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/GIFEncoder",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "npm run test-interface && npm run test-performance",
    "test-interface": "mocha test/gif-encoder_test.js",
    "test-performance": "mocha test/gif-encoder_benchmark.js"
  },
  "dependencies": {
    "readable-stream": "~1.1.9"
  },
  "devDependencies": {
    "mocha": "~1.11.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.0",
    "async": "~0.2.9",
    "get-pixels": "~1.0.1"
  },
  "keywords": [
    "gif",
    "encode",
    "encoder"
  ],
  "readme": "# gif-encoder [![Build status](https://travis-ci.org/twolfson/gif-encoder.png?branch=master)](https://travis-ci.org/twolfson/gif-encoder)\n\nStreaming [GIF][] encoder\n\n[GIF]: http://en.wikipedia.org/wiki/Graphics_Interchange_Format\n\nThis is built as part of the [gifsockets][] project. It is forked from [gif.js][] to allow for a streaming API and performance optimization.\n\n[gifsockets]: https://github.com/twolfson/gifsockets-server\n\n## Getting Started\nInstall the module with: `npm install gif-encoder`\n\n```js\n// Create a 10 x 10 gif\nvar GifEncoder = require('gif-encoder');\nvar gif = new GifEncoder(10, 10);\n\n// using an rgba array of pixels [r, g, b, a, ... continues on for every pixel]\n// This can be collected from a <canvas> via context.getImageData(0, 0, width, height).data\nvar pixels = [0, 0, 0, 255/*, ...*/];\n\n// Collect output\nvar file = require('fs').createWriteStream('img.gif');\ngif.pipe(file);\n\n// Write out the image into memory\ngif.writeHeader();\ngif.addFrame(pixels);\n// gif.addFrame(pixels); // Write subsequent rgba arrays for more frames\ngif.finish();\n```\n\n## Documentation\n`gif-encoder` exports `GifEncoder`, a constructor function which extends `readable-stream@~1.1.9`. This means you can use any `streams1`/`streams2` functionality. I will re-iterate what this means below.\n\n```js\n// streams1\nvar gif = new GifEncoder(10, 10);\ngif.on('data', console.log);\ngif.on('end', process.exit);\n\n// streams2\nvar gif = new GifEncoder(10, 10);\ngif.on('readable', function () {\n  console.log(gif.read());\n});\n```\n\n### `new GifEncoder(width, height, [options])`\nConstructor for a new `GifEncoder`\n\n- width `Number` - Width, in pixels, of the `GIF` to output\n- height `Number` - Height, in pixels, of the `GIF` to output\n- options `Object` - Optional container for any options\n    - highWaterMark `Number` - Number, in bytes, to store in internal buffer. Defaults to 64kB.\n\n**NEVER CALL `.removeAllListeners()`. NO DATA EVENTS WILL BE ABLE TO EMIT.**\n\n> We implement the GIF89a specification which can be found at\n>\n> http://www.w3.org/Graphics/GIF/spec-gif89a.txt\n\n### Events\n#### Event: `data`\n`function (buffer) {}`\n\nEmits a [`Buffer`][] containing either header bytes, frame bytes, or footer bytes.\n\n[`Buffer`]: http://nodejs.org/api/buffer.html\n\n#### Event: `end`\n`function () {}`\n\nSignifies end of the encoding has been reached. This will be emitted once `.finish()` is called.\n\n#### Event: `error`\n`function (error) {}`\n\nEmits an `Error` when internal buffer is exceeded. This occurs when you do not `read` (either via `.on('data')` or `.read()`) and we cannot flush prepared data.\n\n> If you have a very large GIF, you can update [`options.highWaterMark`][Constructor] via the [Constructor][].\n\n[Constructor]: #constructor\n\n#### Event: `readable`\n`function () {}`\n\nEmits when the stream is ready to be `.read()` from.\n\n#### Event: `writeHeader#start/stop`\n`function () {}`\n\nEmits when at the start and end of `.writeHeader()`.\n\n#### Event: `frame#start/stop`\n`function () {}`\n\nEmits when at the start and end of `.addFrame()`\n\n#### Event: `finish#start/stop`\n`function () {}`\n\nEmits when at the start and end of `.finish()`\n\n### Settings\n#### `gif.setDelay(ms)`\nSet milliseconds to wait between frames\n\n- ms `Number` - Amount of milliseconds to delay between frames\n\n#### `setFrameRate(framesPerSecond)`\nSet delay based on amount of frames per second. Cannot be used with `gif.setDelay`.\n\n- framesPerSecond `Number` - Amount of frames per second\n\n#### `setDispose(disposalCode)`\nSet the disposal code\n\n- disposalCode `Number` - Alters behavior of how to render between frames\n    - If no transparent color has been set, defaults to 0.\n    - Otherwise, defaults to 2.\n\n```\nValues :    0 -   No disposal specified. The decoder is\n                  not required to take any action.\n            1 -   Do not dispose. The graphic is to be left\n                  in place.\n            2 -   Restore to background color. The area used by the\n                  graphic must be restored to the background color.\n            3 -   Restore to previous. The decoder is required to\n                  restore the area overwritten by the graphic with\n                  what was there prior to rendering the graphic.\n         4-7 -    To be defined.\n```\n\nTaken from http://www.w3.org/Graphics/GIF/spec-gif89a.txt\n\n#### `setRepeat(n)`\nSets amount of times to repeat `GIF`\n\n- n `Number`\n    - If `n` is -1, play once.\n    - If `n` is 0, loop indefinitely.\n    - If `n` is a positive number, loop `n` times.\n\n#### `setTransparent(color)`\nDefine the color which represents transparency in the `GIF`.\n\n- color `Hexadecimal Number` - Color to represent transparent background\n  - Example: `0x00FF00`\n\n#### `setQuality(quality)`\nSet the quality (computational/performance trade-off).\n\n- quality `Positive number`\n    - 1 is best colors, worst performance.\n    - 20 is suggested maximum but there is no limit.\n    - 10 is the default, provided an even trade-off.\n\n### Input/output\n#### `read([size])`\nRead out `size` bytes or until the end of the buffer. This is implemented by `readable-stream`.\n\n- size `Number` - Optional number of bytes to read out\n\n#### `writeHeader()`\nWrite out header bytes. We are following `GIF89a` specification.\n\n#### `addFrame(imageData)`\nWrite out a new frame to the GIF.\n\n- imageData `Array` - Array of pixels for the new frame. It should follow the sequence of `r, g, b, a` and be `4 * height * width` in length.\n\n#### `finish()`\nWrite out footer bytes.\n\n### Low-level\nFor performance in [gifsockets][], we needed to open up some lower level methods for fancy tricks.\n\n**Don't use these unless you know what you are doing.**\n\n#### `flushData()`\nWe have a secondary internal buffer that collects each byte from `writeByte`. This is to prevent create a new `Buffer` and `data` event for *every byte of data*.\n\nThis method empties the internal buffer and pushes it out to the `stream` buffer for reading.\n\n#### `pixels`\nInternal store for `imageData` passed in by `addFrame`.\n\n#### `analyzeImage(imageData)`\nFirst part of `addFrame`; runs `setImagePixels(removeAlphaChannel(imageData))` and runs `analyzePixels()`.\n\n- imageData `Array` - Same as that in [`addFrame`][]\n\n[`addFrame`]: #addframeimagedata\n\n#### `removeAlphaChannel(imageData)`\nReduces `imageData` into a `Uint8Array` of length `3 * width * height` containing sequences of `r, g, b`; removing the alpha channel.\n\n- imageData `Array` - Same as that in [`addFrame`][]; array containing `r, g, b, a` sequences.\n\n#### `setImagePixels(pixels)`\nSave `pixels` as `this.pixels` for image analysis.\n\n- pixels `Array` - Same as `imageData` from [`addFrame`][]\n    - **`GifEncoder` will mutate the original data.**\n\n#### `writeImageInfo()`\nSecond part of `addFrame`; behavior varies on if it is the first frame or following frame.\n\nIn either case, it writes out a bunch of bytes about the image (e.g. palette, color tables).\n\n#### `outputImage()`\nThird part of `addFrame`; encodes the analyzed/indexed pixels for the GIF format.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## UNLICENSE\nAs of Nov 11 2013, Todd Wolfson has released all code differences since initial fork from [gif.js][] to the public domain.\n\nThese differences have been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n\nAt the [gif.js][] time of forking, [gif.js][] was using the [MIT license][].\n\n[gif.js]: https://github.com/jnordberg/gif.js/tree/faee238491302de05a1ed05e4fbe562738a76310\n\n[MIT license]: https://github.com/jnordberg/gif.js/tree/faee238491302de05a1ed05e4fbe562738a76310#license\n",
  "readmeFilename": "README.md",
  "_id": "gif-encoder@0.4.1",
  "dist": {
    "shasum": "0ec2192b35b91e50073258354b13d3e5165f106b",
    "tarball": "http://registry.npmjs.org/gif-encoder/-/gif-encoder-0.4.1.tgz"
  },
  "_from": "gif-encoder@>=0.4.1 <0.5.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "twolfson",
    "email": "todd@twolfson.com"
  },
  "maintainers": [
    {
      "name": "twolfson",
      "email": "todd@twolfson.com"
    }
  ],
  "directories": {},
  "_shasum": "0ec2192b35b91e50073258354b13d3e5165f106b",
  "_resolved": "https://registry.npmjs.org/gif-encoder/-/gif-encoder-0.4.1.tgz"
}
