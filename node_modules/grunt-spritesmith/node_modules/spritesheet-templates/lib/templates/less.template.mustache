{
  // Default options
  'functions': true
}

/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
{{#items}}
@{{name}}-name: {{name}};
@{{name}}-x: {{px.x}};
@{{name}}-y: {{px.y}};
@{{name}}-offset-x: {{px.offset_x}};
@{{name}}-offset-y: {{px.offset_y}};
@{{name}}-width: {{px.width}};
@{{name}}-height: {{px.height}};
@{{name}}-total-width: {{px.total_width}};
@{{name}}-total-height: {{px.total_height}};
@{{name}}-image: '{{{escaped_image}}}';
@{{name}}: {{px.x}} {{px.y}} {{px.offset_x}} {{px.offset_y}} {{px.width}} {{px.height}} {{px.total_width}} {{px.total_height}} '{{{escaped_image}}}' {{name}};
{{/items}}
@{{spritesheet_name}}-width: {{spritesheet.px.width}};
@{{spritesheet_name}}-height: {{spritesheet.px.height}};
@{{spritesheet_name}}-image: '{{{spritesheet.escaped_image}}}';
@{{spritesheet_name}}-sprites:{{#items}} @{{name}}{{/items}};
@{{spritesheet_name}}: {{spritesheet.px.width}} {{spritesheet.px.height}} '{{{spritesheet.escaped_image}}}' @{{spritesheet_name}}-sprites;

{{#options.functions}}
/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  {{! DEV: We slice to trim off excess quotes on an escaped URL }}
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: extract(@sprite, 10);
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
{{/options.functions}}
